{"version":3,"sources":["source/core/TrainingState.ts","source/core/data/BinaryConverter.ts","source/core/data/DataSource.ts","source/core/data/SingletonContainer.ts","source/core/mlp/MultiLayerPerceptron.ts"],"names":[],"mappings":"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","file":"om-core.js","sourcesContent":["namespace om {\r\n\r\n    /**\r\n     * Contains all states appliable to a neural network while it's training.\r\n     */\r\n    export enum TrainingState {\r\n\r\n        /** When the training hasn't started (0% progress). */\r\n        NotInitialized = 0,\r\n\r\n        /** When the training's started and has progressed less than 25%. */\r\n        Initialized = 1,\r\n\r\n        /** When the training's started and has progressed less than 50%. */\r\n        QuarterPast = 2,\r\n\r\n        /** When the training's started and has progressed less than 75%. */\r\n        Progressing = 3,\r\n\r\n        /** When the training's started and has progressed more than 75%. */\r\n        QuarterShort = 4,\r\n\r\n        /** When the training's completed (all epochs calculated - 100% progress). */\r\n        Completed = 5,\r\n    }\r\n}","namespace om.data {\r\n\r\n    /**\r\n     * A static utility class that converts multiple types of data into their binary representation,\r\n     * i.e. a number or array of numbers that can be given to neural networks.\r\n     */\r\n    export class BinaryConverter {\r\n\r\n        /**\r\n         * Converts the given string to a numeric character code array.\r\n         *\r\n         * @param value\r\n         *   A string to be converted to its binary form.\r\n         */\r\n        public static fromString(value: string) {\r\n\r\n            const result: number[] = [];\r\n\r\n            for (const char of value) {\r\n                result.push(char.charCodeAt(0));\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * Converts a numeric character code array to a string.\r\n         *\r\n         * @param value\r\n         *   A number array containing the character code values of the resulting string.\r\n         */\r\n        public static toString(value: number[]) {\r\n\r\n            return String.fromCharCode.apply(null, value) as string;\r\n        }\r\n\r\n        private constructor() {}\r\n    }\r\n}\r\n","// namespace om.data {\r\n\r\n//     export interface DataSource {\r\n\r\n\r\n//     }\r\n// }\r\n","namespace om.data {\r\n\r\n    /**\r\n     * Represents objects that create and retrieve singleton instances for its registered classes.\r\n     *\r\n     * **Important: ** The storage scope is delimited by the object itself, thus multiple singleton\r\n     * containers will store different instances for a class.\r\n     */\r\n    export class SingletonContainer {\r\n\r\n        private _dictionary: Dictionary<any> = {};\r\n\r\n        /**\r\n         * Checks whether the container has the specified type registered or not.\r\n         *\r\n         * @param type\r\n         *   A reference to the class/constructable member to be checked.\r\n         * @typeparam T\r\n         *   Type of object to be checked.\r\n         */\r\n        public contains<T>(type: Constructable<T>) {\r\n\r\n            const key = this._getKey(type);\r\n            return key in this._dictionary;\r\n        }\r\n\r\n        /**\r\n         * Gets the singleton instance of a registered class.\r\n         *\r\n         * @param type\r\n         *   A reference to the class/constructable member to be obtained.\r\n         * @throws ReferenceError\r\n         *   when the class is not registered to the container.\r\n         * @typeparam T\r\n         *   Type of object to be obtained.\r\n         */\r\n        public get<T>(type: Constructable<T>) {\r\n\r\n            const key = this._getKey(type);\r\n\r\n            if (!(key in this._dictionary)) {\r\n                throw new Error(\"Class not registered to the singleton container.\");\r\n            }\r\n\r\n            return (this._dictionary[key] as T);\r\n        }\r\n\r\n        /**\r\n         * Registers a new class to the container and creates its unique instance.\r\n         *\r\n         * @param type\r\n         *   A reference to the class/constructable member to be registered.\r\n         * @param errorIfRegistered\r\n         *   If true and the class already exists, an error will be thrown; no errors are thrown\r\n         *   otherwise.\r\n         * @throws ReferenceError\r\n         *   when the class is already registered to the container.\r\n         * @typeparam T\r\n         *   Type of object to be registered.\r\n         */\r\n        public register<T>(type: Constructable<T>, errorIfRegistered: boolean = false) {\r\n\r\n            const key = this._getKey(type);\r\n\r\n            if (!(key in this._dictionary)) {\r\n                const instance = new type();\r\n                this._dictionary[key] = instance;\r\n\r\n                return;\r\n            }\r\n\r\n            if (errorIfRegistered) {\r\n                throw new ReferenceError(\"Singleton class already registered.\");\r\n            }\r\n        }\r\n\r\n        private _getKey<T>(type: Constructable<T>) {\r\n            return JSON.stringify(type);\r\n        }\r\n    }\r\n}\r\n","namespace om.mlp {\r\n\r\n    /**\r\n     * Default learning rate value applied to perceptron neural networks.\r\n     */\r\n    export const DEFAULT_MOMENTUM = 0.8;\r\n\r\n    /**\r\n     * An abstract class that contains the implementations for common perceptron configuration\r\n     * properties and abstractions for actual neural code.\r\n     *\r\n     * @example Teaching the perceptron how to perform a logical XOR:\r\n     *\r\n     * ```javascript\r\n     * // 2 inputs, 1 output, and 2 hidden layers (with 5 and 3 nodes)\r\n     * var nn = new om.mlp.MultiLayerPerceptron(2, 1, 5, 3);\r\n     *\r\n     * // Set array = [x1, x2, x1 ^ x2];\r\n     * nn.train([\r\n     *     [0, 0, -1],\r\n     *     [0, 1, 1],\r\n     *     [1, 0, 1],\r\n     *     [1, 1, -1]\r\n     * ]);\r\n     *\r\n     * console.log(nn.execute(1, 0)); // 0.99653000121\r\n     * console.log(nn.execute(0, 0)); // -0.99374607104\r\n     *\r\n     * // Sets the output data transformer to round the numbers\r\n     * nn.addDataTransformer(nn.outputLayer, om.DataTransformer.round());\r\n     *\r\n     * console.log(nn.execute(1, 1)); // 0\r\n     * console.log(nn.execute(0, 1)); // 1\r\n     * ```\r\n     */\r\n    export class MultiLayerPerceptron<TOut> implements AsyncNeuralNetwork<TOut> {\r\n\r\n        private _momentum: number = DEFAULT_MOMENTUM;\r\n        private _state: TrainingState = TrainingState.NotInitialized;\r\n\r\n        /**\r\n         * Gets/sets the learning rate for the perceptron, a number that determines the speed of\r\n         * the linear correction of the network weights.\r\n         */\r\n        public get learningRate() { return this._momentum; }\r\n\r\n        public async asyncExecute(callback: ExecuteCallback<TOut>, ...input: any[]): Promise<void> {\r\n\r\n            const result = await this._createExecutePromise(input);\r\n            callback(result);\r\n        }\r\n\r\n        public async asyncTrain(callback: TrainingCallback, ...dataSet: any[]): Promise<void> {\r\n\r\n            while (this._state !== TrainingState.Completed) {\r\n                await this._createTrainingPromise(dataSet);\r\n                callback(this._state);\r\n            }\r\n        }\r\n\r\n        public execute(...input: any[]): TOut {\r\n            console.log(input);\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        public train(...dataSet: any[]): void {\r\n            console.log(dataSet);\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        private _createExecutePromise(input: any[]) {\r\n\r\n            return new Promise<TOut>(resolve => {\r\n                const result = this.execute.apply(this, input);\r\n                resolve(result);\r\n            });\r\n        }\r\n\r\n        private _createTrainingPromise(dataSet: any[]) {\r\n\r\n            return new Promise<void>(resolve => {\r\n                this.train.apply(this, dataSet);\r\n                resolve();\r\n            });\r\n        }\r\n    }\r\n}\r\n"]}