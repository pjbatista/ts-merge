{"version":3,"sources":["source/core/TrainingState.ts","source/core/data/BinaryConverter.ts","source/core/data/DataSource.ts","source/core/data/SingletonContainer.ts","source/core/mlp/MultiLayerPerceptron.ts"],"names":[],"mappings":"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","file":"file1_raw.merged.js","sourceRoot":"","sourcesContent":["namespace om {\r\n\r\n    /**\r\n     * Contains all states appliable to a neural network while it's training.\r\n     */\r\n    export enum TrainingState {\r\n\r\n        /** When the training hasn't started (0% progress). */\r\n        NotInitialized = 0,\r\n\r\n        /** When the training's started and has progressed less than 25%. */\r\n        Initialized = 1,\r\n\r\n        /** When the training's started and has progressed less than 50%. */\r\n        QuarterPast = 2,\r\n\r\n        /** When the training's started and has progressed less than 75%. */\r\n        Progressing = 3,\r\n\r\n        /** When the training's started and has progressed more than 75%. */\r\n        QuarterShort = 4,\r\n\r\n        /** When the training's completed (all epochs calculated - 100% progress). */\r\n        Completed = 5,\r\n    }\r\n}","namespace om.data {\r\n\r\n    /**\r\n     * A static utility class that converts multiple types of data into their binary representation,\r\n     * i.e. a number or array of numbers that can be given to neural networks.\r\n     */\r\n    export class BinaryConverter {\r\n\r\n        /**\r\n         * Converts the given string to a numeric character code array.\r\n         *\r\n         * @param value\r\n         *   A string to be converted to its binary form.\r\n         */\r\n        public static fromString(value: string) {\r\n\r\n            const result: number[] = [];\r\n\r\n            for (const char of value) {\r\n                result.push(char.charCodeAt(0));\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * Converts a numeric character code array to a string.\r\n         *\r\n         * @param value\r\n         *   A number array containing the character code values of the resulting string.\r\n         */\r\n        public static toString(value: number[]) {\r\n\r\n            return String.fromCharCode.apply(null, value) as string;\r\n        }\r\n\r\n        private constructor() {}\r\n    }\r\n}\r\n","// namespace om.data {\r\n\r\n//     export interface DataSource {\r\n\r\n\r\n//     }\r\n// }\r\n","namespace om.data {\r\n\r\n    /**\r\n     * Represents objects that create and retrieve singleton instances for its registered classes.\r\n     *\r\n     * **Important: ** The storage scope is delimited by the object itself, thus multiple singleton\r\n     * containers will store different instances for a class.\r\n     */\r\n    export class SingletonContainer {\r\n\r\n        private _dictionary: Dictionary<any> = {};\r\n\r\n        /**\r\n         * Checks whether the container has the specified type registered or not.\r\n         *\r\n         * @param type\r\n         *   A reference to the class/constructable member to be checked.\r\n         * @typeparam T\r\n         *   Type of object to be checked.\r\n         */\r\n        public contains<T>(type: Constructable<T>) {\r\n\r\n            const key = this._getKey(type);\r\n            return key in this._dictionary;\r\n        }\r\n\r\n        /**\r\n         * Gets the singleton instance of a registered class.\r\n         *\r\n         * @param type\r\n         *   A reference to the class/constructable member to be obtained.\r\n         * @throws ReferenceError\r\n         *   when the class is not registered to the container.\r\n         * @typeparam T\r\n         *   Type of object to be obtained.\r\n         */\r\n        public get<T>(type: Constructable<T>) {\r\n\r\n            const key = this._getKey(type);\r\n\r\n            if (!(key in this._dictionary)) {\r\n                throw new Error(\"Class not registered to the singleton container.\");\r\n            }\r\n\r\n            return (this._dictionary[key] as T);\r\n        }\r\n\r\n        /**\r\n         * Registers a new class to the container and creates its unique instance.\r\n         *\r\n         * @param type\r\n         *   A reference to the class/constructable member to be registered.\r\n         * @param errorIfRegistered\r\n         *   If true and the class already exists, an error will be thrown; no errors are thrown\r\n         *   otherwise.\r\n         * @throws ReferenceError\r\n         *   when the class is already registered to the container.\r\n         * @typeparam T\r\n         *   Type of object to be registered.\r\n         */\r\n        public register<T>(type: Constructable<T>, errorIfRegistered: boolean = false) {\r\n\r\n            const key = this._getKey(type);\r\n\r\n            if (!(key in this._dictionary)) {\r\n                const instance = new type();\r\n                this._dictionary[key] = instance;\r\n\r\n                return;\r\n            }\r\n\r\n            if (errorIfRegistered) {\r\n                throw new ReferenceError(\"Singleton class already registered.\");\r\n            }\r\n        }\r\n\r\n        private _getKey<T>(type: Constructable<T>) {\r\n            return JSON.stringify(type);\r\n        }\r\n    }\r\n}\r\n","namespace om.mlp {\r\n\r\n    /**\r\n     * Default learning rate value applied to perceptron neural networks.\r\n     */\r\n    export const DEFAULT_MOMENTUM = 0.8;\r\n\r\n    /**\r\n     * An abstract class that contains the implementations for common perceptron configuration\r\n     * properties and abstractions for actual neural code.\r\n     *\r\n     * @example Teaching the perceptron how to perform a logical XOR:\r\n     *\r\n     * ```javascript\r\n     * // 2 inputs, 1 output, and 2 hidden layers (with 5 and 3 nodes)\r\n     * var nn = new om.mlp.MultiLayerPerceptron(2, 1, 5, 3);\r\n     *\r\n     * // Set array = [x1, x2, x1 ^ x2];\r\n     * nn.train([\r\n     *     [0, 0, -1],\r\n     *     [0, 1, 1],\r\n     *     [1, 0, 1],\r\n     *     [1, 1, -1]\r\n     * ]);\r\n     *\r\n     * console.log(nn.execute(1, 0)); // 0.99653000121\r\n     * console.log(nn.execute(0, 0)); // -0.99374607104\r\n     *\r\n     * // Sets the output data transformer to round the numbers\r\n     * nn.addDataTransformer(nn.outputLayer, om.DataTransformer.round());\r\n     *\r\n     * console.log(nn.execute(1, 1)); // 0\r\n     * console.log(nn.execute(0, 1)); // 1\r\n     * ```\r\n     */\r\n    export class MultiLayerPerceptron<TOut> implements AsyncNeuralNetwork<TOut> {\r\n\r\n        private _momentum: number = DEFAULT_MOMENTUM;\r\n        private _state: TrainingState = TrainingState.NotInitialized;\r\n\r\n        /**\r\n         * Gets/sets the learning rate for the perceptron, a number that determines the speed of\r\n         * the linear correction of the network weights.\r\n         */\r\n        public get learningRate() { return this._momentum; }\r\n\r\n        public async asyncExecute(callback: ExecuteCallback<TOut>, ...input: any[]): Promise<void> {\r\n\r\n            const result = await this._createExecutePromise(input);\r\n            callback(result);\r\n        }\r\n\r\n        public async asyncTrain(callback: TrainingCallback, ...dataSet: any[]): Promise<void> {\r\n\r\n            while (this._state !== TrainingState.Completed) {\r\n                await this._createTrainingPromise(dataSet);\r\n                callback(this._state);\r\n            }\r\n        }\r\n\r\n        public execute(...input: any[]): TOut {\r\n            console.log(input);\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        public train(...dataSet: any[]): void {\r\n            console.log(dataSet);\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        private _createExecutePromise(input: any[]) {\r\n\r\n            return new Promise<TOut>(resolve => {\r\n                const result = this.execute.apply(this, input);\r\n                resolve(result);\r\n            });\r\n        }\r\n\r\n        private _createTrainingPromise(dataSet: any[]) {\r\n\r\n            return new Promise<void>(resolve => {\r\n                this.train.apply(this, dataSet);\r\n                resolve();\r\n            });\r\n        }\r\n    }\r\n}\r\n"]}